merge_sort(65318724)

merge_sort(A): 	merge_sort(65318724)	 
    n = len(A)		8
    if n==1: 
        return A
    mid = n//2     	4
    L = merge_sort(A[:mid]) merge_sort(6531) L = [1,3,5,6]
    R = merge_sort(A[mid:]) merge_sort(8724)(not covered, same as merge_sort(6531)) R = [2,4,7,8]
    return merge(L,R) merge([1,3,5,6], [2,4,7,8]) return to CALLER [1,2,3,4,5,6,7,8]
 

merge_sort(A): 	merge_sort(6531)		 
    n = len(A)		4
    if n==1: 
        return A
    mid = n//2    	2
    L = merge_sort(A[:mid])  merge_sort(65) L = [5,6]
    R = merge_sort(A[mid:])  merge_sort(31) L = [1,3]
    return merge(L,R)  	merge ([5,6],[1,3]) [1,3,5,6] return to merge_sort(65318724) 
  

merge_sort(A): 	merge_sort(65)	 
    n = len(A)		2	
    if n==1: 
        return A	
    mid = n//2     	1
    L = merge_sort(A[:mid])  merge_sort(6) L = 6
    R = merge_sort(A[mid:])  merge_sort(5) R = 5
    return merge(L,R)        merge(6,5)  [5,6] return to merge_sort(6531)



merge_sort(A): 	merge_sort(6)	 
    n = len(A)		1	
    if n==1: 
        return A	6 return to merge_sort(65)	
    mid = n//2     	
    L = merge_sort(A[:mid])  
    R = merge_sort(A[mid:])
    return merge(L,R)



merge_sort(A): 	merge_sort(5)	 
    n = len(A)		1	
    if n==1: 
        return A	5 return to merge_sort(65)	
    mid = n//2     	
    L = merge_sort(A[:mid])  
    R = merge_sort(A[mid:])
   return merge(L,R)



merge_sort(A): 	merge_sort(31)	 
    n = len(A)		2	
    if n==1: 
        return A	
    mid = n//2     	1
    L = merge_sort(A[:mid])  merge_sort(3) L = 3
    R = merge_sort(A[mid:])  merge_sort(1) R = 1
   return merge(L,R)         merge(3,1) [1,3] return to merge_sort(6531)


merge_sort(A): 	merge_sort(3)
    n = len(A)		1	
    if n==1: 
        return A      3 return to merge_sort(31)
    mid = n//2     	
    L = merge_sort(A[:mid])  
    R = merge_sort(A[mid:])
   return merge(L,R)


merge_sort(A): 	merge_sort(1)
    n = len(A)		1	
    if n==1: 
        return A      1 return to merge_sort(31)
    mid = n//2     	
    L = merge_sort(A[:mid])  
    R = merge_sort(A[mid:])
   return merge(L,R)








merge(L,R):		merge(6,5) 
    i = 0
    j = 0
    answer = []
    while i<len(L) and j<len(R):	len(L)==1 and len(R)==1
        if L[i]<R[j]:
            answer.append(L[i])
            i += 1
        else:
            answer.append(R[j])
            j += 1
    if i<len(L):
        answer.extend(L[i:])
    if j<len(R):
        answer.extend(R[j:])
    return answer	answer = [5,6] return to merge_sort(65)	 




merge(L,R):		merge(3,1) 
    i = 0
    j = 0
    answer = []
    while i<len(L) and j<len(R):	len(L)==1 and len(R)==1
        if L[i]<R[j]:
            answer.append(L[i])
            i += 1
        else:
            answer.append(R[j])
            j += 1
    if i<len(L):
        answer.extend(L[i:])
    if j<len(R):
        answer.extend(R[j:])
    return answer	answer = [1,3] return to merge_sort(31)	 



---------------------------------------------------------
ANALYSIS OF
merge([1,3,5,6], [2,4,7,8]) 


merge(L,R):		
    i = 0
    j = 0
    answer = []
    while i<len(L) and j<len(R):	len(L) = 4 len(R) = 4
        if L[i]<R[j]:
            answer.append(L[i])
            i += 1
        else:
            answer.append(R[j])
            j += 1
    if i<len(L):
        answer.extend(L[i:])
    if j<len(R):
        answer.extend(R[j:])
    return answer	 






